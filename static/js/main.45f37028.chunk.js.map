{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","initial","checked","date","Date","types","selectedOption","Boolean","obj","data","JSON","parse","e","_useUrlSearchParams","useUrlSearchParams","_useUrlSearchParams2","Object","slicedToArray","queries","setQueries","React","useEffect","console","log","react_default","a","createElement","className","href","style","userSelect","type","onChange","target","value","onClick","arr","stringify","x","y","z","textAlign","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAwFeA,MApFf,WACE,IAAMC,EAAU,CAAEC,SAAS,EAAMC,KAAM,IAAIC,KAAK,KAAM,EAAG,IACnDC,EAAQ,CACZC,eAAgB,CAAC,UAAW,UAAW,WACvCJ,QAASK,QACTJ,KAAMC,KACNI,IAAK,SAAAC,GACH,IACE,OAAOC,KAAKC,MAAMF,GAClB,MAAOG,GACP,MAAO,MAVAC,EAciBC,6BAAmBb,EAASI,GAd7CU,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAcNK,EAdMH,EAAA,GAcGI,EAdHJ,EAAA,GAoBb,OAJAK,IAAMC,UAAU,WACdC,QAAQC,IAAI,WAAYL,EAAQhB,UAC/B,CAACgB,EAAQhB,UAGVsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uBACa,IACXF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,sDAAR,0BAIFJ,EAAAC,EAAAC,cAAA,iBACM,IACJF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qFAAR,qBAIFJ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOG,MAAO,CAAEC,WAAY,SAC1BN,EAAAC,EAAAC,cAAA,SACEK,KAAK,WACL7B,SAA6B,IAApBgB,EAAQhB,QACjB8B,SAAU,SAAApB,GAAC,OAAIO,EAAW,CAAEjB,QAASU,EAAEqB,OAAO/B,aAC7C,IALL,aAQAsB,EAAAC,EAAAC,cAAA,UACEQ,MAAOhB,EAAQZ,eACf0B,SAAU,SAAApB,GAAC,OAAIO,EAAW,CAAEb,eAAgBM,EAAEqB,OAAOC,UAErDV,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,WAAd,YACAV,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,WAAd,YACAV,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,WAAd,aAEFV,EAAAC,EAAAC,cAAA,UACES,QAAS,WACPhB,EAAW,CAAEhB,KAAM,IAAIC,SAF3B,mBAOAoB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAW,CAAEiB,IAAK,CAAC,EAAG,EAAG,OAAhD,6BAGAZ,EAAAC,EAAAC,cAAA,UACES,QAAS,kBACPhB,EAAW,CAAEX,IAAKE,KAAK2B,UAAU,CAAEC,EAAG,CAAEC,EAAG,CAAEC,EAAG,UAFpD,kCAOAhB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAW,CAAEX,IAAK,SAAzC,sBAIAgB,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEY,UAAW,SAAzB,WAEEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAOhB,KAAK2B,UAAUnB,EAAS,KAAM,SCpE7BX,QACW,cAA7BmC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.45f37028.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { useUrlSearchParams } from \"use-url-search-params\";\n\nfunction App() {\n  const initial = { checked: true, date: new Date(2019, 6, 1) };\n  const types = {\n    selectedOption: [\"option1\", \"option2\", \"option3\"],\n    checked: Boolean,\n    date: Date,\n    obj: data => {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        return {};\n      }\n    }\n  };\n  const [queries, setQueries] = useUrlSearchParams(initial, types);\n\n  React.useEffect(() => {\n    console.log(\"checked:\", queries.checked);\n  }, [queries.checked]);\n\n  return (\n    <div className=\"App\">\n      <h2>\n        Example of{\" \"}\n        <a href=\"https://github.com/rudyhuynh/use-url-search-params\">\n          use-url-search-params\n        </a>\n      </h2>\n      <div>\n        See{\" \"}\n        <a href=\"https://github.com/rudyhuynh/use-url-search-params/blob/master/example/src/App.js\">\n          source code here\n        </a>\n      </div>\n      <main>\n        <label style={{ userSelect: \"none\" }}>\n          <input\n            type=\"checkbox\"\n            checked={queries.checked === true}\n            onChange={e => setQueries({ checked: e.target.checked })}\n          />{\" \"}\n          Check me!\n        </label>\n        <select\n          value={queries.selectedOption}\n          onChange={e => setQueries({ selectedOption: e.target.value })}\n        >\n          <option />\n          <option value=\"option1\">option 1</option>\n          <option value=\"option2\">option 2</option>\n          <option value=\"option3\">option 3</option>\n        </select>\n        <button\n          onClick={() => {\n            setQueries({ date: new Date() });\n          }}\n        >\n          Set date object\n        </button>\n        <button onClick={() => setQueries({ arr: [1, 2, 3] })}>\n          Set an array to URL query\n        </button>\n        <button\n          onClick={() =>\n            setQueries({ obj: JSON.stringify({ x: { y: { z: 1 } } }) })\n          }\n        >\n          Set a JSON object to URL query\n        </button>\n        <button onClick={() => setQueries({ obj: null })}>\n          Delete `obj` query\n        </button>\n\n        <div style={{ textAlign: \"left\" }}>\n          Queries:\n          <pre>\n            <code>{JSON.stringify(queries, null, 2)}</code>\n          </pre>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}